package org.fortiss.smg.rulesystem.impl.ruleManager;import org.fortiss.smg.ambulance.api.AmbulanceInterface;import org.fortiss.smg.ambulance.api.AmbulanceQueueNames;import org.fortiss.smg.actuatormaster.api.AbstractListener;import org.fortiss.smg.actuatormaster.api.IActuatorListener;import org.fortiss.smg.actuatormaster.api.AbstractConnector.IOnConnectListener;import org.fortiss.smg.containermanager.api.ContainerManagerQueueNames;import org.fortiss.smg.informationbroker.api.InformationBrokerInterface;import org.fortiss.smg.informationbroker.api.InformationBrokerQueueNames;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.fortiss.smg.rulesystem.api.RuleSystemDBInterface;import org.fortiss.smg.rulesystem.api.RuleSystemDroolsInterface;import org.fortiss.smg.rulesystem.api.RuleSystemQueueNames;import org.fortiss.smg.rulesystem.impl.executor.RuleSystemDroolsImpl;import org.fortiss.smg.rulesystem.impl.persistor.RuleSystemDBImpl;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.slf4j.LoggerFactory;public class RuleSystemActivator implements BundleActivator {	private static final int TIMEOUTLONG = 5000;	    DefaultServer<RuleSystemDBInterface> rsQueryServer;    RuleSystemDBImpl ruleImpl;        RuleSystemDroolsImpl droolsImpl;        private static org.slf4j.Logger logger = LoggerFactory.getLogger(RuleSystemActivator.class);        private DefaultProxy<InformationBrokerInterface> infoBrokerClient;        private AbstractListener serverLogger;	private IActuatorListener server;        @Override    public void start(BundleContext context) throws Exception {        // register here your services etc.    	logger.debug("inside start method of rule system activator");    	// Notify ambulance    	DefaultProxy<AmbulanceInterface> ambulanceClient = new DefaultProxy<AmbulanceInterface>(				AmbulanceInterface.class,				AmbulanceQueueNames.getAmbulanceQueue(), TIMEOUTLONG);    	AmbulanceInterface ambuInt = ambulanceClient.init();		ambuInt.registerComponent(RuleSystemQueueNames.getRuleSystemInterfaceQueue(), "RuleSystem");		ambulanceClient.destroy();				String dbConnectionString = "jdbc:" + context.getProperty("sql.loc");		String dbUser = context.getProperty("sql.user");		String dbPassword = context.getProperty("sql.pass");				logger.warn("trying to connect to database --> {} ,account:{},pass:{} ",				dbConnectionString, dbUser, dbPassword);		infoBrokerClient = new DefaultProxy<InformationBrokerInterface>(				InformationBrokerInterface.class, 				InformationBrokerQueueNames.getQueryQueue(), TIMEOUTLONG);				InformationBrokerInterface infoBroker = infoBrokerClient.init();				ruleImpl= new RuleSystemDBImpl(infoBroker);		droolsImpl = new RuleSystemDroolsImpl(infoBroker);                logger.info("RuleSystem is alive");                rsQueryServer = new DefaultServer<RuleSystemDBInterface>		(RuleSystemDBInterface.class, ruleImpl, 		RuleSystemQueueNames.getRuleSystemInterfaceQueue());    	rsQueryServer.init();    	    	 serverLogger = AbstractListener.registerAsListenerAtServerStatic(droolsImpl, "drools",    			 RuleSystemQueueNames.getRuelSystemListenerQueue(), new IOnConnectListener() { 			@Override 			public void onSuccessFullConnection() { 				logger.info("RuleSystem registered as Listener");	 			} 		});    	//		dbUtil = new RuleSystemDBUtil(dbConnectionString, dbUser, dbPassword, logger);//		dbUtil.checkOrOpenDBConnection();//        serverLogger = AbstractListener.registerAsListenerAtServerStatic(ruleImpl,"ruleSystem", RuleSystemQueueNames.getRuleSystemInterfaceQueue(), //        		new IOnConnectListener() {//			//			@Override//			public void onSuccessFullConnection() {//				logger.info("Rulesystem registered as Listener");	//			}//		});//        //        serverLogger = AbstractListener.registerAsListenerAtServerStatic(droolsImpl,"DroolsRuleSystem", RuleSystemQueueNames.getRuleSystemInterfaceQueue(), //        		new IOnConnectListener() {//			//			@Override//			public void onSuccessFullConnection() {//				logger.info("Drools Rulesystem registered as Listener");	//			}//		});              /*		// Connect to ContainerManager		DefaultProxy<ContainerManagerInterface> containerClient = new DefaultProxy<ContainerManagerInterface>(			ContainerManagerInterface.class, 			ContainerManagerQueueNames.getContainerManagerInterfaceQueryQueue(),TIMEOUTLONG);			ContainerManagerInterface containerInt = containerClient.init();			ruleImpl = new RuleSystemDBImpl(dbUtil, logger);			      rsqueryserver = new DefaultServer<RuleSystemInterface>(RuleSystemInterface.class, ruleImpl, 			        		RuleSystemQueueNames.getRuleSystemInterfaceQueue());											containerClient.destroy();*/		        // DO NOT start heavy operations here - use threads    	logger.info("RuleSystem Initiated############");}    @Override    public void stop(BundleContext context) throws Exception {        // REMEMBER to destroy all resources, threads and do cleanup        rsQueryServer.destroy();        logger.info("RuleSystem is dead");        serverLogger.destroy();    }}