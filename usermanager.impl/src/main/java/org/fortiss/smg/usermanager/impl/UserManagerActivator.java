package org.fortiss.smg.usermanager.impl;import java.util.Calendar;import java.util.List;import java.util.Map;import org.fortiss.smg.ambulance.api.AmbulanceInterface;import org.fortiss.smg.ambulance.api.AmbulanceQueueNames;import org.fortiss.smg.containermanager.api.devices.DeviceId;import org.fortiss.smg.informationbroker.api.DoublePoint;import org.fortiss.smg.informationbroker.api.InformationBrokerInterface;import org.fortiss.smg.informationbroker.api.InformationBrokerQueueNames;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.fortiss.smg.usermanager.api.KeyManagerInterface;import org.fortiss.smg.usermanager.api.UserManagerInterface;import org.fortiss.smg.usermanager.api.UserManagerQueueNames;import org.fortiss.smg.usermanager.dbutil.UserManagerDBUtil;import org.fortiss.smg.usermanager.impl.key.KeyManagerImpl;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.slf4j.LoggerFactory;public class UserManagerActivator implements BundleActivator {	private static final int TIMEOUTLONG = 5000;	DefaultServer<UserManagerInterface> server;	UserManagerImpl impl;	private KeyManagerImpl keymanager;	private DefaultServer<KeyManagerInterface> serverKeymanager;	// Logger from sl4j	private static org.slf4j.Logger logger = LoggerFactory.getLogger(UserManagerActivator.class);	private UserManagerDBUtil dbUtil;	private DefaultProxy<InformationBrokerInterface> clientInfo;	@Override	public void start(BundleContext context) throws Exception {		// register here your services etc.		// DO NOT start heavy operations here - use threads		// say hello to ambulance		DefaultProxy<AmbulanceInterface> ambulanceClient = new DefaultProxy<AmbulanceInterface>(				AmbulanceInterface.class, AmbulanceQueueNames.getAmbulanceQueue(), TIMEOUTLONG);		AmbulanceInterface ambuInt = ambulanceClient.init();		ambuInt.registerComponent(UserManagerQueueNames.getKeyManagerInterfaceQueue(), "Keymanager");		ambuInt.registerComponent(UserManagerQueueNames.getUserManagerInterfaceQueue(), "Usermanager");		ambulanceClient.destroy();		String dbConnectionString = "jdbc:" + context.getProperty("sql.loc");		String dbUser = context.getProperty("sql.user");		String dbPassword = context.getProperty("sql.pass");		logger.warn("trying to connect to database --> {} ,account:{},pass:{} ", dbConnectionString, dbUser,				dbPassword);		clientInfo = new DefaultProxy<InformationBrokerInterface>(InformationBrokerInterface.class,				InformationBrokerQueueNames.getQueryQueue(), TIMEOUTLONG);		InformationBrokerInterface broker = clientInfo.init();		dbUtil = new UserManagerDBUtil(dbConnectionString, dbUser, dbPassword);		dbUtil.checkOrOpenDBConnection();		impl = new UserManagerImpl(broker); // dbUtil);// , logger);		keymanager = new KeyManagerImpl(broker);// , logger);		server = new DefaultServer<UserManagerInterface>(UserManagerInterface.class, impl,				UserManagerQueueNames.getUserManagerInterfaceQueue());		server.init();		serverKeymanager = new DefaultServer<KeyManagerInterface>(KeyManagerInterface.class, keymanager,				UserManagerQueueNames.getKeyManagerInterfaceQueue());		serverKeymanager.init();	}	@Override	public void stop(BundleContext context) throws Exception {		// REMEMBER to destroy all resources, threads and do cleanup		// impl.closeDBConnetion();		clientInfo.destroy();		server.destroy();		logger.info("UserManager is dead");		serverKeymanager.destroy();		logger.info("Keymanager is dead");	}}