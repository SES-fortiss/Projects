package org.fortiss.smg.analyzer.impl;import java.util.Locale;import org.fortiss.smg.ambulance.api.AmbulanceInterface;import org.fortiss.smg.ambulance.api.AmbulanceQueueNames;import org.fortiss.smg.analyzer.api.AnalyzerInterface;import org.fortiss.smg.analyzer.api.AnalyzerQueueNames;import org.fortiss.smg.informationbroker.api.InformationBrokerInterface;import org.fortiss.smg.informationbroker.api.InformationBrokerQueueNames;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class AnalyzerActivator implements BundleActivator {	private static final int TIMEOUTLONG = 5000;	DefaultServer<AnalyzerInterface> server;	AnalyzerImpl analyzerImpl;	// Logger from sl4j	private static Logger logger = LoggerFactory.getLogger(AnalyzerActivator.class);	@Override	public void start(BundleContext context) throws Exception {		// register here your services etc.		// DO NOT start heavy operations here - use threads		// say hello to ambulance		DefaultProxy<AmbulanceInterface> ambulanceClient = new DefaultProxy<AmbulanceInterface>(				AmbulanceInterface.class, AmbulanceQueueNames.getAmbulanceQueue(), TIMEOUTLONG);		AmbulanceInterface ambuInt = ambulanceClient.init();		ambuInt.registerComponent(AnalyzerQueueNames.getAnalyzerInterfaceQueue(), "Analyzer");		ambulanceClient.destroy();		Locale.setDefault(Locale.US);		// Timeout for Informationbroker is set to 600 seconds which should be		// enough for collecting the data of a year. If the amount of data is		// even bigger please correct the timeout value.		// getting information form different bundle by their interfaces		// here from the InformationBroker		DefaultProxy<InformationBrokerInterface> clientInfo = new DefaultProxy<InformationBrokerInterface>(				InformationBrokerInterface.class, InformationBrokerQueueNames.getQueryQueue(), 600000);		InformationBrokerInterface broker = clientInfo.init();		// creating a server that can be accessed by other bundles		// AnalyzerImpl is the logical part of this bundle		analyzerImpl = new AnalyzerImpl(broker);		analyzerImpl.start();		// starting Server		server = new DefaultServer<AnalyzerInterface>(AnalyzerInterface.class, analyzerImpl,				AnalyzerQueueNames.getAnalyzerInterfaceQueue());		server.init();		logger.info("Analyzer is alive");	}	@Override	public void stop(BundleContext context) throws Exception {		// REMEMBER to destroy all resources, threads and do cleanup		analyzerImpl.stopCore();		server.destroy();		logger.info("Analyzer is dead");	}}