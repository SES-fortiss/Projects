package org.fortiss.smg.stabilize.impl;import org.fortiss.smg.ambulance.api.AmbulanceInterface;import org.fortiss.smg.ambulance.api.AmbulanceQueueNames;import org.fortiss.smg.remoteframework.lib.DefaultProxy;import org.fortiss.smg.remoteframework.lib.DefaultServer;import org.fortiss.smg.stabilize.api.StabilizeInterface;import org.fortiss.smg.stabilize.api.StabilizeQueueNames;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.slf4j.LoggerFactory;public class StabilizeActivator implements BundleActivator {    DefaultServer<StabilizeInterface> server;    StabilizeImpl impl;    // Logger from sl4j    private static org.slf4j.Logger logger = LoggerFactory.getLogger(StabilizeActivator.class);    @Override    public void start(BundleContext context) throws Exception {        // register here your services etc.        // DO NOT start heavy operations here - use threads    	logger.debug("Stabilize is starting here");		DefaultProxy<AmbulanceInterface> ambulanceClient = new DefaultProxy<AmbulanceInterface>(				AmbulanceInterface.class,				AmbulanceQueueNames.getAmbulanceQueue(), 5000);		AmbulanceInterface ambuInt = ambulanceClient.init();		ambuInt.registerComponent(StabilizeQueueNames.getStabilizeInterfaceQueue(), "Stabilize");		ambulanceClient.destroy();    	        impl = new StabilizeImpl();        server = new DefaultServer<StabilizeInterface>(StabilizeInterface.class, impl, StabilizeQueueNames.getStabilizeInterfaceQueue());        server.init();//    	InterfaceFactory.activate();        logger.info("Stabilize is alive");    }    @Override    public void stop(BundleContext context) throws Exception {        // REMEMBER to destroy all resources, threads and do cleanup        server.destroy();        logger.info("Stabilize is dead");    }}